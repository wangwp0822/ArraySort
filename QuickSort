快速排序算法的介绍
时间复杂度O(nlogn),最坏的情况下O(n^2)，快排使用分治法策略把一个串行分为两个子串行

快速排序的思想：
1.从数列中挑出一个元素，成为基准(pivot);
2.重新排序数列，所有元素比基准值小的放在基准前边，所有元素比基准值打的放在基准后边（相同的数可以放到任一边），
  在这个分区退出之后，该基准就处于数列的中间位置，这个称为分区。
3.递归的把小于基准值元素的子数列和大于基准值元素的自数列排序。

Nodejs程序实现
1.普通数组的快速排序

    /**
     * 普通数组快速排序
     * @param array 数字数组
     * @param dir asc 升序，desc降序
     * @returns {*}
     */
    
    exports.quickSortArray = function(array,dir) {
        dir = dir || 'asc';
        if(array.length == 0) {
            return [];
        }
        var left = new Array();
        var right = new Array();
        var pivot = array[0];
        
        if(dir == 'asc') {
            for(var i = 1; i < array.length;i++) {
                array[i] < pivot ? left.push(array[i]) : right.push(array[i]);
            }
        } else {
            for (var i = 1; i <array.length;i++) {
                array[i] > pivot ? left.push(array[i]) : right.push(array[i]);
            }
        }
    
        return this.quickSortArray(left, dir).concat(pivot, this.quickSortArray(right, dir));
    };

2.按数组对象中的属性进行快速排序

/**
 * json对象数组快速排序
 * @param array 对象数组
 * @param key  对象中的某个key
 * @param dir  asc 升序，desc降序
 * @returns {*}
 */
exports.quickSortObj = function(array,key,dir) {
    key = key || 'id';
    dir = dir || 'asc';
    if(array.length == 0) {
        return [];
    }
    var left = new Array();
    var right = new Array();
    var pivot = array[0][key];//分割值
    var pivotObj = array[0];//存储值
    if(dir == 'asc') {
        for(var i = 1; i <array.length;i++) {
            array[i][key] < pivot ? left.push(array[i]) : right.push(array[i]);
        }
    } else {
        for(var i = 1 ; i < array.length;i++) {
           array[i][key] > pivot ?left.push(array[i]) : right.push(array[i]);
        }
    }
    return this.quickSortObj(left, key, dir).concat(pivotObj, this.quickSortObj(right, key, dir));
};
